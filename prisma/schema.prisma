// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id                String      @id @default(uuid())
  name              String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  expensesPaid      Expense[]   @relation("PaidBy")
  expenseSplits     Split[]
  groupMemberships  GroupMember[]
  settlementsFrom   Settlement[] @relation("SettlementFrom")
  settlementsTo     Settlement[] @relation("SettlementTo")
}

model Expense {
  id          String    @id @default(uuid())
  description String
  amount      Float
  currency    String
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  paidBy      Person    @relation("PaidBy", fields: [paidById], references: [id], onDelete: Cascade)
  paidById    String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  group       Group?    @relation(fields: [groupId], references: [id])
  groupId     String?
  splits      Split[]
}

model Split {
  id        String  @id @default(uuid())
  amount    Float
  
  // Relations
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId String
  person    Person  @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId  String

  @@unique([expenseId, personId])
}

model Group {
  id          String      @id @default(uuid())
  name        String
  description String?
  date        DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  members     GroupMember[]
  expenses    Expense[]
  settlements Settlement[]
}

model GroupMember {
  id        String  @id @default(uuid())
  
  // Relations
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  person    Person  @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId  String

  @@unique([groupId, personId])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  isCustom  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  expenses  Expense[]
}

model Currency {
  code         String    @id
  symbol       String
  name         String
  exchangeRate Float
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Settlement {
  id            String    @id @default(uuid())
  amount        Float
  currency      String
  date          DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  fromPerson    Person    @relation("SettlementFrom", fields: [fromPersonId], references: [id], onDelete: Cascade)
  fromPersonId  String
  toPerson      Person    @relation("SettlementTo", fields: [toPersonId], references: [id], onDelete: Cascade)
  toPersonId    String
  group         Group?    @relation(fields: [groupId], references: [id])
  groupId       String?
}

model UserSettings {
  id              String  @id @default(uuid())
  selectedCurrency String
  selectedGroup   String?
  darkMode        Boolean @default(false)
  userId          String  @unique
}
